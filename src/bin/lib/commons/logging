#!/bin/bash
#set -eux
#===================================================================================================
# loggingユーティリティ
#
# 概要
#   ${LOGLEVEL} に応じて stderr, ${PATH_LOG} にログメッセージを出力します。
#
# 依存
#   open usp Tukubai
#
# 定義リスト
#   log.add_indent
#   log.remove_indent
#   log.clear_indent
#   log.save_indent
#   log.restore_indent
#
#   log.trace
#   log.debug
#   log.info
#   log.warn
#   log.error
#
#   log.tee
#   log.split
#
#   log.is_trace_enabled
#   log.is_debug_enabled
#
#   log.rotatelog_by_day
#   log.rotatelog_by_day_first
#
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 前提チェック
#---------------------------------------------------------------------------------------------------
echo ${EXITCODE_SUCCESS:?} >/dev/null
echo ${EXITCODE_WARN:?} >/dev/null
echo ${EXITCODE_ERROR:?} >/dev/null

if [[ $(type -t "log.mask") != "function" ]]; then
  # shellcheck disable=SC2207
  frame=($(caller 0))
  echo "${frame[2]}: line ${frame[0]}: function 'log.mask' is undefined." >&2
  exit ${EXITCODE_ERROR}
fi


#---------------------------------------------------------------------------------------------------
# プロセス単位の環境変数 ※定数ですが、複数回sourceされることを考慮して変数として定義しています。
#---------------------------------------------------------------------------------------------------
LOGLEVEL_TRACE="${LOGLEVEL_TRACE:-TRACE}"
LOGLEVEL_DEBUG="${LOGLEVEL_DEBUG:-DEBUG}"
LOGLEVEL_INFO="${LOGLEVEL_INFO:- INFO}"
LOGLEVEL_WARN="${LOGLEVEL_WARN:- WARN}"
LOGLEVEL_ERROR="${LOGLEVEL_ERROR:-ERROR}"
LOGLEVEL=${LOGLEVEL:-${LOGLEVEL_INFO}}

# TODO フォーマットは、ここでの出力定義と、rotateでの正規表現の2箇所のメンテナンスが必要。
LOG__RAW_OUTPUT=${LOG__RAW_OUTPUT:-false}
LOG__FORMAT_DATE="+%Y-%m-%d"
LOG__FORMAT_TIMESTAMP="${LOG__FORMAT_DATE} %T"
LOG__INDENT_STR="--"
LOG__GREP_FORMAT="[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\} "

LOG__COLOR_NONE='\033[0m'
LOG__COLOR_RED='\033[1;31m'
LOG__COLOR_YELLOW='\033[1;33m'
LOG__COLOR_CYAN='\033[1;36m'
LOG__COLOR_BLUE='\033[1;34m'

LOG__IS_TTY="false"
if tty -s; then LOG__IS_TTY="true"; fi


#---------------------------------------------------------------------------------------------------
# 起動元スクリプト単位の環境変数
#---------------------------------------------------------------------------------------------------
# 現在インデント深度
export LOG__INDENT_COUNT=${LOG__INDENT_COUNT:-0}
# 一時保存インデント深度ファイル数
#   ※実ファイルは、スクリプト名 + PID毎に別管理しておき、各プロセス毎の restoreするインデント深度を保持しています。
export LOG__SAVED_INDENT_FILE_COUNT=${LOG__SAVED_INDENT_FILE_COUNT:-0}





#---------------------------------------------------------------------------------------------------
# インデント追加
#
# 引数
#   なし
#
#---------------------------------------------------------------------------------------------------
function log.add_indent() {
  LOG__INDENT_COUNT=$(( LOG__INDENT_COUNT + 1 ))
}
#---------------------------------------------------------------------------------------------------
# インデント削除
#
# 引数
#   ・1: インデント削除数 ※デフォルト:1
#
#---------------------------------------------------------------------------------------------------
function log.remove_indent() {
  local _count=${1:-1}
  LOG__INDENT_COUNT=$(( LOG__INDENT_COUNT - _count ))
}
#---------------------------------------------------------------------------------------------------
# インデントクリア
#---------------------------------------------------------------------------------------------------
function log.clear_indent() {
  LOG__INDENT_COUNT=0
}
#---------------------------------------------------------------------------------------------------
# インデント一時保存ディレクトリ ※PID毎に一意
#---------------------------------------------------------------------------------------------------
function private.log.get_stack_dir() {
  echo "/tmp/logging_indent_stack__$(basename $0 .sh)_$$"
}
#---------------------------------------------------------------------------------------------------
# インデント一時保存
#---------------------------------------------------------------------------------------------------
function log.save_indent() {
  local _stack_dir="$(private.log.get_stack_dir)"
  # 保存数のインクリメント
  LOG__SAVED_INDENT_FILE_COUNT=$(( LOG__SAVED_INDENT_FILE_COUNT + 1 ))
  # 保存ディレクトリ作成
  if [ ! -d "${_stack_dir}" ]; then mkdir -p "${_stack_dir}"; fi
  # 現在インデント深度をファイル保存
  echo ${LOG__INDENT_COUNT} > "${_stack_dir}/${LOG__SAVED_INDENT_FILE_COUNT}"
}
#---------------------------------------------------------------------------------------------------
# インデントリストア
#---------------------------------------------------------------------------------------------------
function log.restore_indent() {
  local _stack_dir="$(private.log.get_stack_dir)"
  # インデント深度のリストア
  LOG__INDENT_COUNT=$(cat "${_stack_dir}/${LOG__SAVED_INDENT_FILE_COUNT}")
  # 保存ファイルの削除
  rm -f "${_stack_dir}/${LOG__SAVED_INDENT_FILE_COUNT}"
  # 保存ファイル数のデクリメント
  LOG__SAVED_INDENT_FILE_COUNT=$(( LOG__SAVED_INDENT_FILE_COUNT - 1 ))
  # ディレクトリ毎のファイル数確認
  local _file_count="$(find ${_stack_dir} -mindepth 1 -maxdepth 1 -type f | wc -l)"
  # 0以下の場合、保存ディレクトリ削除
  if [ ${_file_count} -le 0 ]; then rm -fr "${_stack_dir}"; fi
}

#---------------------------------------------------------------------------------------------------
# インデント取得
#---------------------------------------------------------------------------------------------------
function log.get_indent() {
  echo "${LOG__INDENT_COUNT}"
}
#---------------------------------------------------------------------------------------------------
# インデント設定
#
# 引数
#   ・1: インデント数
#
#---------------------------------------------------------------------------------------------------
function log.set_indent() {
  LOG__INDENT_COUNT=${1:?}
}



#---------------------------------------------------------------------------------------------------
# private.ログ標準出力
#
# 概要
#   ログフォーマットに従って、引数の文言を標準出力します。
#   標準出力されるのはマスキングされた結果です。
#
# 前提
#   ・なし
#
# 引数
#   ・1  : ログレベル
#   ・2〜: ログ出力文言
#
# 出力
#   標準出力
#
#---------------------------------------------------------------------------------------------------
function private.log.format() {
  local _log_level="$1"
  local _timestamp=$(date "${LOG__FORMAT_TIMESTAMP}")
  shift
  local _msg="$*"

  if [ "${LOG__RAW_OUTPUT}" = "true" ]; then
    # メッセージのみを出力
    echo "${_msg}"                                                                                 |
    log.mask
    return ${EXITCODE_SUCCESS}
  fi

  _msg=$(
    echo "${_msg}"                                                                                 |
    #-----------------------------------------------------------------------------------------------
    # レイアウト
    # TIMESTAMP LOG_LEVEL INDENT MESSAGE
    #-----------------------------------------------------------------------------------------------
    awk                                                                                            \
      -v _timestamp="${_timestamp}"                                                                \
      -v _log_level="${_log_level}"                                                                \
      -v LOG__INDENT_STR="${LOG__INDENT_STR}"                                                      \
      -v LOG__INDENT_COUNT="${LOG__INDENT_COUNT}"                                                  \
      '{
        # 「TIMESTAMP LOG_LEVEL」の出力
        printf _timestamp" "_log_level

        # 「 INDENT」の出力
        for (i = 0; i < LOG__INDENT_COUNT; i++) {
          if ( i == 0) {
            printf " "
          }
          printf LOG__INDENT_STR
        }

        # 「MESSAGE + 改行」の出力
        print " "$0
      }'                                                                                           |
    log.mask
  )

  if [[ "${LOG__IS_TTY}" != "true" ]]; then
    echo "${_msg}"
    return ${EXITCODE_SUCCESS}
  fi

  local _color="${LOG__COLOR_NONE}"
  case "${_log_level}" in
    "${LOGLEVEL_TRACE}")
      _color="${LOG__COLOR_BLUE}"
      ;;
    "${LOGLEVEL_DEBUG}")
      _color="${LOG__COLOR_CYAN}"
      ;;
    "${LOGLEVEL_WARN}")
      _color="${LOG__COLOR_YELLOW}"
      ;;
    "${LOGLEVEL_ERROR}")
      _color="${LOG__COLOR_RED}"
      ;;
  esac

  echo -e "${_color}${_msg}${LOG__COLOR_NONE}"
}



#---------------------------------------------------------------------------------------------------
# private.ログファイルチェック
#
# 概要
#   出力するログファイルの存在チェック、初期化処理です。
#
# 前提
#   ・PATH_LOG が定義されていること
#
# 引数
#   ・なし
#
# 出力
#   PATH_LOG ※空ファイル
#
#---------------------------------------------------------------------------------------------------
function private.log.check_file() {
  # ファイル存在チェック
  if [ ! -f "${PATH_LOG:?}" ]; then
    local _dir_log=$(dirname "${PATH_LOG}")
    if [ ! -d "${_dir_log}" ]; then
      mkdir -p "${_dir_log}"
      if [ $? -ne ${EXITCODE_SUCCESS} ]; then return ${EXITCODE_ERROR}; fi
    fi

    touch "${PATH_LOG}"
  fi

  return ${EXITCODE_SUCCESS}
}



#---------------------------------------------------------------------------------------------------
# private.ログ出力要否チェック
#
# 概要
#   引数のログレベルが、出力が必要か否かを判定します。
#
# 前提
#   ・LOGLEVEL が定義されていること
#
# 引数
#   ・1: 判定対象のログレベル
#
# 出力
#   なし
#
# 戻り値
#   出力が必要な場合: 0
#   出力が不要な場合: 3
#   判定できない場合: 6
#
#---------------------------------------------------------------------------------------------------
function private.log.is_write() {
  local _trg_log_lebel="$1"

  #-------------------------------------------------------------------------------------------------
  # 引数チェック
  #-------------------------------------------------------------------------------------------------
  if [ "${_trg_log_lebel}" != "${LOGLEVEL_TRACE}" ] && \
     [ "${_trg_log_lebel}" != "${LOGLEVEL_DEBUG}" ] && \
     [ "${_trg_log_lebel}" != "${LOGLEVEL_INFO}"  ] && \
     [ "${_trg_log_lebel}" != "${LOGLEVEL_WARN}"  ] && \
     [ "${_trg_log_lebel}" != "${LOGLEVEL_ERROR}" ] ; then
    private.log.format "${LOGLEVEL_ERROR}" "ログレベル：「${_trg_log_lebel}」は想定外の値です。" 1>&2
    return ${EXITCODE_ERROR}
  fi

  if [ "${LOGLEVEL}" = "${LOGLEVEL_DEBUG}" ]; then
    # DEBUG以上のログレベルを出力
    if [ "${_trg_log_lebel}" = "${LOGLEVEL_TRACE}" ]; then
      return ${EXITCODE_WARN}
    fi

  elif [ "${LOGLEVEL}" = "${LOGLEVEL_INFO}" ]; then
    # INFO以上のログレベルを出力
    if [ "${_trg_log_lebel}" = "${LOGLEVEL_TRACE}" ] || \
       [ "${_trg_log_lebel}" = "${LOGLEVEL_DEBUG}" ] ; then
      return ${EXITCODE_WARN}
    fi

  elif [ "${LOGLEVEL}" = "${LOGLEVEL_WARN}" ]; then
    # WARN以上のログレベルを出力
    if [ "${_trg_log_lebel}" = "${LOGLEVEL_TRACE}" ] || \
       [ "${_trg_log_lebel}" = "${LOGLEVEL_DEBUG}" ] || \
       [ "${_trg_log_lebel}" = "${LOGLEVEL_INFO}"  ] ; then
      return ${EXITCODE_WARN}
    fi

  elif [ "${LOGLEVEL}" = "${LOGLEVEL_ERROR}" ]; then
    # ERROR以上のログレベルを出力
    if [ "${_trg_log_lebel}" = "${LOGLEVEL_TRACE}" ] || \
       [ "${_trg_log_lebel}" = "${LOGLEVEL_DEBUG}" ] || \
       [ "${_trg_log_lebel}" = "${LOGLEVEL_INFO}"  ] || \
       [ "${_trg_log_lebel}" = "${LOGLEVEL_WARN}"  ] ; then
      return ${EXITCODE_WARN}
    fi
  fi

  return ${EXITCODE_SUCCESS}
}





#---------------------------------------------------------------------------------------------------
# private.ログコンソール出力
#
# 概要
#   引数の文言 or パイプ経由の標準入力 を、コンソールにログフォーマットで出力します。
#
# 前提
#   ・LOGLEVEL が定義されていること
#   ・PATH_LOG が定義されていること
#
# 引数
#   ・1  : 出力ログレベル
#   ・2〜: 出力文言 ※パイプの場合は不要
#
# 出力
#   標準出力/標準エラー
#
# 戻り値
#   出力に成功した場合: 0
#   出力に失敗した場合: 6
#
#---------------------------------------------------------------------------------------------------
function private.log.console() {
  local _trg_log_level="$1"
  shift

  #-------------------------------------------------------------------------------------------------
  # 出力判定
  #-------------------------------------------------------------------------------------------------
  private.log.is_write "${_trg_log_level}"
  local _retcode=$?
  if [ ${_retcode} -eq ${EXITCODE_ERROR} ]; then
    # 判定できない場合、エラー終了
    return ${EXITCODE_ERROR}
  fi

  #-------------------------------------------------------------------------------------------------
  # パイプ判断
  #-------------------------------------------------------------------------------------------------
  if [ -p /dev/stdin ] && [ $# -eq 0 ]; then
    # パイプの場合
    if [ ${_retcode} -eq ${EXITCODE_WARN} ]; then
      # 出力が不要な場合、ここで終了
      cat - >/dev/null 2>&1
      return ${EXITCODE_SUCCESS}
    fi

    while IFS= read -r _cur_row; do
      private.log.format "${_trg_log_level}" "${_cur_row}" 1>&2
    done < <(cat -)

  else
    # 引数指定の場合
    if [ ${_retcode} -eq ${EXITCODE_WARN} ]; then
      # 出力が不要な場合、ここで終了
      return ${EXITCODE_SUCCESS}
    fi

    private.log.format "${_trg_log_level}" "$@" 1>&2
  fi

  return ${EXITCODE_SUCCESS}
}
#---------------------------------------------------------------------------------------------------
# traceログ コンソール出力
#---------------------------------------------------------------------------------------------------
function log.trace() {
  local _trg_log_level="${LOGLEVEL_TRACE}"

  if [ -p /dev/stdin ] && [ $# -eq 0 ]; then
    cat - | private.log.console "${_trg_log_level}"
  else
    IFS=" $'\n'$'\t'" private.log.console "${_trg_log_level}" "$@"
  fi

  return ${EXITCODE_SUCCESS}
}
#---------------------------------------------------------------------------------------------------
# debugログ コンソール出力
#---------------------------------------------------------------------------------------------------
function log.debug() {
  local _trg_log_level="${LOGLEVEL_DEBUG}"

  if [ -p /dev/stdin ] && [ $# -eq 0 ]; then
    cat - | private.log.console "${_trg_log_level}"
  else
    IFS=" $'\n'$'\t'" private.log.console "${_trg_log_level}" "$@"
  fi

  return ${EXITCODE_SUCCESS}
}
#---------------------------------------------------------------------------------------------------
# infoログ コンソール出力
#---------------------------------------------------------------------------------------------------
function log.info() {
  local _trg_log_level="${LOGLEVEL_INFO}"

  if [ -p /dev/stdin ] && [ $# -eq 0 ]; then
    cat - | private.log.console "${_trg_log_level}"
  else
    IFS=" $'\n'$'\t'" private.log.console "${_trg_log_level}" "$@"
  fi

  return ${EXITCODE_SUCCESS}
}
#---------------------------------------------------------------------------------------------------
# warnログ コンソール出力
#---------------------------------------------------------------------------------------------------
function log.warn() {
  local _trg_log_level="${LOGLEVEL_WARN}"

  if [ -p /dev/stdin ] && [ $# -eq 0 ]; then
    cat - | private.log.console "${_trg_log_level}"
  else
    IFS=" $'\n'$'\t'" private.log.console "${_trg_log_level}" "$@"
  fi

  return ${EXITCODE_SUCCESS}
}
#---------------------------------------------------------------------------------------------------
# errorログ コンソール出力
#---------------------------------------------------------------------------------------------------
function log.error_oneline() {
  local _trg_log_level="${LOGLEVEL_ERROR}"

  if [ -p /dev/stdin ] && [ $# -eq 0 ]; then
    cat - | private.log.console "${_trg_log_level}"
  else
    IFS=" $'\n'$'\t'" private.log.console "${_trg_log_level}" "$@"
  fi

  return ${EXITCODE_SUCCESS}
}

function log.error() {
  if [ -p /dev/stdin ] && [ $# -eq 0 ]; then
    cat - | log.error_oneline
  else
    log.error_oneline "$@"
  fi

  private.print_stacktrace
  return ${EXITCODE_SUCCESS}
}

function private.print_stacktrace() {
  index=1
  # shellcheck disable=SC2207
  while frame=($(caller "${index}")); do
    ((index++))
    # at function <function name> (<file name>:<line no>)
    echo "  at function ${frame[1]} (${frame[2]}:${frame[0]})" >&2
  done
  echo "" >&2
}


#---------------------------------------------------------------------------------------------------
# 概要
#   パイプで渡された標準出力を、PATH_LOGに追記して、標準エラー出力します。
#   ※バウンダリスクリプトなどで、標準エラー出力されたログをファイルにteeする状況を想定しています。
#
#   stdin ----> stdout   ----> stderr
#          |--> PATH_LOG
#
# 引数
#   なし
#
# 出力
#   なし
#
# サンプル
#   command 2>&1 | log.tee
#
#---------------------------------------------------------------------------------------------------
function log.tee() {
  private.log.check_file
  cat - | tee -a "${PATH_LOG}" 1>&2
}



#---------------------------------------------------------------------------------------------------
# 概要
#   パイプで渡された標準出力を標準出力と標準エラーに分岐します。
#   ※標準出力で実行結果を返す機能で、ログにも出力したい状況を想定しています。
#
#   stdin ----> stdout
#          |--> stderr
#
# 引数
#   なし
#
# 出力
#   なし
#
# サンプル
#   command | log.split
#
#---------------------------------------------------------------------------------------------------
function log.split() {
  cat - | tee -a /dev/stderr
}



function log.is_trace_enabled() {
  if [ "${LOGLEVEL}" = "${LOGLEVEL_TRACE}" ]; then
    echo "true"
    return
  fi

  echo "false"
}



function log.is_debug_enabled() {
  if [ "${LOGLEVEL}" = "${LOGLEVEL_TRACE}" ] ||
     [ "${LOGLEVEL}" = "${LOGLEVEL_DEBUG}" ]; then
     echo "true"
     return
   fi

   echo "false"
}



#---------------------------------------------------------------------------------------------------
# 概要
#   ログローテーション（日次）
#
# 引数
#   なし
#
# 出力
#   ${PATH_LOG}.${日付}
#
#---------------------------------------------------------------------------------------------------
function log.rotatelog_by_day() {
  # ログファイルチェック
  private.log.check_file
  if [ $? -ne ${EXITCODE_SUCCESS} ]; then return ${EXITCODE_ERROR}; fi

  # 当日
  local _cur_date=$(date ${LOG__FORMAT_DATE})

  # 最終行の日付
  local _last_date=$(grep "${LOG__GREP_FORMAT}" "${PATH_LOG}" | tail -n 1 | cut -d " " -f 1)
  if [ "${_last_date}x" = "x" ]; then return ${EXITCODE_SUCCESS}; fi

  # 最終行の日付が当日と一致しない場合、ローテーション
  if [ "${_last_date}" != "${_cur_date}" ]; then
    private.log.rotate "${PATH_LOG}.${_last_date//\//}"
  fi

  return ${EXITCODE_SUCCESS}
}



#---------------------------------------------------------------------------------------------------
# 概要
#   ログローテーション（日次） ※先頭行で判断
#
# 引数
#   なし
#
# 出力
#   ${PATH_LOG}.${日付}
#
#---------------------------------------------------------------------------------------------------
function log.rotatelog_by_day_first() {
  # ログファイルチェック
  private.log.check_file
  if [ $? -ne ${EXITCODE_SUCCESS} ]; then return ${EXITCODE_ERROR}; fi

  # 当日
  local _cur_date=$(date ${LOG__FORMAT_DATE})

  # 先頭行の日付
  local _first_date=$(grep "${LOG__GREP_FORMAT}" "${PATH_LOG}" | head -n 1 | cut -d " " -f 1)
  if [ "${_first_date}x" = "x" ]; then return ${EXITCODE_SUCCESS}; fi

  # 先頭行の日付が当日と一致しない場合、ローテーション
  if [ "${_first_date}" != "${_cur_date}" ]; then
    private.log.rotate "${PATH_LOG}.${_first_date//\//}"
  fi

  return ${EXITCODE_SUCCESS}
}


function private.log.rotate() {
  local _path_output=${1:?}

  # ローテーション先ファイルが存在する場合、現在時刻でリネーム
  if [ -f "${_path_output}" ]; then
    mv "${_path_output}" "${_path_output}.$(date '+%Y%m%d%H%M%S')"
  fi

  # コピー
  cp -p "${PATH_LOG}" "${_path_output}"
  if [ $? -ne ${EXITCODE_SUCCESS} ]; then
    local _filename_output="$(basename ${_path_output})"
    log.error "${PATH_LOG} を ${_filename_output} にコピーできません。"
    return ${EXITCODE_ERROR}
  fi

  # 本体を空に置き換え
  cp /dev/null "${PATH_LOG}"
  if [ $? -ne ${EXITCODE_SUCCESS} ]; then
    log.error "${PATH_LOG} を 空ファイル に置き換えできません。"
    return ${EXITCODE_ERROR}
  fi
}
