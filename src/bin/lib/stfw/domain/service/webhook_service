#!/bin/bash
#===================================================================================================
#
# webhook service
#
#===================================================================================================
. "${DIR_BIN_LIB}/stfw/domain/service/spec/webhook_spec"
. "${DIR_BIN_LIB}/stfw/domain/repository/webhook_repository"


#---------------------------------------------------------------------------------------------------
#
# command
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.service.webhook.run_start_requested() {
  stfw.log.func_start_trace "$@"
  local _run_id="${1:?}"

  # validate
  stfw.domain.service.spec.webhook.can_run_start "${_run_id}"
  if [[ $? -ne ${EXITCODE_SUCCESS} ]]; then
    stfw.log.func_end_trace ${EXITCODE_ERROR}
    return ${EXITCODE_ERROR}
  fi

  # start
  stfw.domain.repository.webhook.add_run_start "${_run_id}"
  local _retcode=$?

  stfw.log.func_end_trace ${_retcode}
  return ${_retcode}
}


function stfw.domain.service.webhook.run_end_requested() {
  stfw.log.func_start_trace "$@"
  local _run_id="${1:?}"

  # validate
  stfw.domain.service.spec.webhook.can_run_end "${_run_id}"
  if [[ $? -ne ${EXITCODE_SUCCESS} ]]; then
    stfw.log.func_end_trace ${EXITCODE_ERROR}
    return ${EXITCODE_ERROR}
  fi

  # end
  stfw.domain.repository.webhook.add_run_end "${_run_id}"
  local _retcode=$?

  stfw.log.func_end_trace ${_retcode}
  return ${_retcode}
}


function stfw.domain.service.webhook.scenario_start_requested() {
  stfw.log.func_start_trace "$@"
  local _scenario_dir="${1:?}"

  # validate
  stfw.domain.service.spec.webhook.can_scenario_start "${_scenario_dir}"
  if [[ $? -ne ${EXITCODE_SUCCESS} ]]; then
    stfw.log.func_end_trace ${EXITCODE_ERROR}
    return ${EXITCODE_ERROR}
  fi

  # start
  stfw.domain.repository.webhook.add_scenario_start "${_scenario_dir}"
  local _retcode=$?

  stfw.log.func_end_trace ${_retcode}
  return ${_retcode}
}


function stfw.domain.service.webhook.scenario_end_requested() {
  stfw.log.func_start_trace "$@"
  local _scenario_dir="${1:?}"

  # validate
  stfw.domain.service.spec.webhook.can_scenario_end "${_scenario_dir}"
  if [[ $? -ne ${EXITCODE_SUCCESS} ]]; then
    stfw.log.func_end_trace ${EXITCODE_ERROR}
    return ${EXITCODE_ERROR}
  fi

  # end
  stfw.domain.repository.webhook.add_scenario_end "${_scenario_dir}"
  local _retcode=$?

  stfw.log.func_end_trace ${_retcode}
  return ${_retcode}
}


function stfw.domain.service.webhook.bizdate_start_requested() {
  stfw.log.func_start_trace "$@"
  local _bizdate_dir="${1:?}"

  # validate
  stfw.domain.service.spec.webhook.can_bizdate_start "${_bizdate_dir}"
  if [[ $? -ne ${EXITCODE_SUCCESS} ]]; then
    stfw.log.func_end_trace ${EXITCODE_ERROR}
    return ${EXITCODE_ERROR}
  fi

  # start
  stfw.domain.repository.webhook.add_bizdate_start "${_bizdate_dir}"
  local _retcode=$?

  stfw.log.func_end_trace ${_retcode}
  return ${_retcode}
}


function stfw.domain.service.webhook.bizdate_end_requested() {
  stfw.log.func_start_trace "$@"
  local _bizdate_dir="${1:?}"

  # validate
  stfw.domain.service.spec.webhook.can_bizdate_end "${_bizdate_dir}"
  if [[ $? -ne ${EXITCODE_SUCCESS} ]]; then
    stfw.log.func_end_trace ${EXITCODE_ERROR}
    return ${EXITCODE_ERROR}
  fi

  # end
  stfw.domain.repository.webhook.add_bizdate_end "${_bizdate_dir}"
  local _retcode=$?

  stfw.log.func_end_trace ${_retcode}
  return ${_retcode}
}


function stfw.domain.service.webhook.process_start_requested() {
  stfw.log.func_start_trace "$@"
  local _process_dir="${1:?}"
  local _process_type="${2:?}"

  # validate
  stfw.domain.service.spec.webhook.can_process_start "${_process_dir}" "${_process_type}"
  if [[ $? -ne ${EXITCODE_SUCCESS} ]]; then
    stfw.log.func_end_trace ${EXITCODE_ERROR}
    return ${EXITCODE_ERROR}
  fi

  # start
  stfw.domain.repository.webhook.add_process_start "${_process_dir}" "${_process_type}"
  local _retcode=$?

  stfw.log.func_end_trace ${_retcode}
  return ${_retcode}
}


function stfw.domain.service.webhook.process_end_requested() {
  stfw.log.func_start_trace "$@"
  local _process_dir="${1:?}"
  local _process_type="${2:?}"

  # validate
  stfw.domain.service.spec.webhook.can_process_end "${_process_dir}" "${_process_type}"
  if [[ $? -ne ${EXITCODE_SUCCESS} ]]; then
    stfw.log.func_end_trace ${EXITCODE_ERROR}
    return ${EXITCODE_ERROR}
  fi

  # end
  stfw.domain.repository.webhook.add_process_end "${_process_dir}" "${_process_type}"
  local _retcode=$?

  stfw.log.func_end_trace ${_retcode}
  return ${_retcode}
}


#---------------------------------------------------------------------------------------------------
#
# query
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.service.webhook.get_start_payload() {
  stfw.domain.repository.webhook.get_start_payload                                                 |
  grep                                                                                             \
    -e "^payload:"                                                                                 \
    -e "^  id:"                                                                                    \
    -e "^  type:"                                                                                  \
    -e "^  status:"                                                                                \
    -e "^  start_time:"
  return ${PIPESTATUS[0]}
}


function stfw.domain.service.webhook.get_end_payload() {
  stfw.domain.repository.webhook.get_end_payload                                                   |
  grep                                                                                             \
    -e "^payload:"                                                                                 \
    -e "^  id:"                                                                                    \
    -e "^  type:"                                                                                  \
    -e "^  status:"                                                                                \
    -e "^  start_time:"                                                                            \
    -e "^  end_time:"                                                                              \
    -e "^  processing_time:"
  return ${PIPESTATUS[0]}
}
