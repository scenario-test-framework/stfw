#!/bin/bash
#===================================================================================================
#
# digdag gateway
#
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 依存定数
#---------------------------------------------------------------------------------------------------
STFW__FILENAME_START_INFO="${STFW__FILENAME_START_INFO:?}"


#---------------------------------------------------------------------------------------------------
# digdagバージョン取得
#
# 概要
#   digdagのバージョンを取得します。
#
# 引数
#   なし
#
# 出力
#   環境変数
#     なし
#   標準出力
#     digdagバージョン
#   ファイル
#     ${STFW_PROJ_DIR_DATA}/digdag_version
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.version() {
  if [[ ! -f "${STFW_PROJ_DIR_DATA}/digdag_version" ]]; then
    ${PATH_DIGDAG} version 2>/dev/null                                                             |
    grep "Server"                                                                                  |
    cut -d ' ' -f 3 > ${STFW_PROJ_DIR_DATA}/digdag_version
  fi
  cat ${STFW_PROJ_DIR_DATA}/digdag_version
}


#---------------------------------------------------------------------------------------------------
# digdag url取得
#
# 概要
#   digdagのurlを取得します。
#
# 引数
#   なし
#
# 出力
#   環境変数
#     なし
#   標準出力
#     digdag url
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.url() {
  echo "http://$(get_ip):${stfw_server_port:?}"
}


#---------------------------------------------------------------------------------------------------
# dig実行 localモード
#
# 概要
#   指定のdigファイルを digdag local モードで実行します。
#
# 引数
#   1: digファイルパス
#
# 出力
#   環境変数
#     なし
#   標準出力
#     なし
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.local_run() {
  local _dig_file_path="${1:?}"

  local _dig_dir=$(dirname "${_dig_file_path}")
  local _dig_file_name=$(basename "${_dig_file_path}")

  log.trace "cd \"${_dig_dir}\""
  cd "${_dig_dir}"

  local _cmd=( "${PATH_DIGDAG}" run "${_dig_file_name}" --rerun )
  log.trace "${_cmd[@]}"
  "${_cmd[@]}" >&2
  local _retcode=$?

  log.trace "cd -"
  cd - >/dev/null 2>&1

  return ${_retcode}
}


#---------------------------------------------------------------------------------------------------
# digdag push
#
# 概要
#   指定のdigdagプロジェクトディレクトリをdigdag serverにpushします。
#
# 引数
#   1:  digdagプロジェクトディレクトリ
#   2:  digdagプロジェクト名
#   3~: digdagプロジェクト リビジョン名引数リスト
#
# 出力
#   環境変数
#     なし
#   標準出力
#     なし
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.push() {
  local _proj_dir="${1:?}"
  local _proj_name="${2:?}"
  shift 2
  local _rev_args="$*"

  local _retcode=${EXITCODE_SUCCESS}

  log.trace "cd \"${_proj_dir}\""
  cd "${_proj_dir}"

  local _cmd=(
    "${PATH_DIGDAG}" push "${_proj_name}"
      --revision "${_rev_args}"
      --endpoint "localhost:${stfw_server_port}"
  )
  log.trace "${_cmd[@]}"
  "${_cmd[@]}" >&2
  _retcode=$?

  log.trace "cd -"
  cd - >/dev/null 2>&1

  return ${_retcode}
}


#---------------------------------------------------------------------------------------------------
# dig実行 clientモード
#
# 概要
#   digdag serverにpushしたプロジェクトのdigを実行します。
#
# 引数
#   1: digdagプロジェクトディレクトリ
#   2: digdagプロジェクト名
#   3: dig名
#
# 出力
#   環境変数
#     なし
#   標準出力
#     なし
#   ファイル
#     digdagプロジェクトディレクトリ/start.info
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.start() {
  local _proj_dir="${1:?}"
  local _proj_name="${2:?}"
  local _dig_name="${3:?}"

  local _cmd=(
    "${PATH_DIGDAG}" start "${_proj_name}" "${_dig_name}"
      --session now
      --endpoint "localhost:${stfw_server_port}"
  )
  log.trace "${_cmd[@]}"
  "${_cmd[@]}" | tee "${_proj_dir}/${STFW__FILENAME_START_INFO}" >&2
  return ${PIPESTATUS[0]}
}


#---------------------------------------------------------------------------------------------------
# attempt id取得
#
# 概要
#   stfw.domain.gateway.digdag.startで実行したdigのattempt idを取得します。
#
# 引数
#   1: digdagプロジェクトディレクトリ
#
# 出力
#   環境変数
#     なし
#   標準出力
#     attempt id
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.get_attempt_id() {
  private.stfw.domain.gateway.digdag.get_start_info "${1:?}" "attempt id"
}


#---------------------------------------------------------------------------------------------------
# dig実行情報の表示
#
# 概要
#   stfw.domain.gateway.digdag.startで実行したdigの実行情報を表示します。
#
# 引数
#   1: digdagプロジェクトディレクトリ
#
# 出力
#   環境変数
#     なし
#   標準出力
#     実行情報
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.show_start_info() {
  local _digdag_proj_dir="${1:?}"

  local _project=$(private.stfw.domain.gateway.digdag.get_start_info "${_digdag_proj_dir}" "project")
  local _workflow=$(private.stfw.domain.gateway.digdag.get_start_info "${_digdag_proj_dir}" "workflow")
  local _session_id=$(private.stfw.domain.gateway.digdag.get_start_info "${_digdag_proj_dir}" "session id")
  local _attempt_id=$(stfw.domain.gateway.digdag.get_attempt_id "${_digdag_proj_dir}")

  echo "project    : ${_project}"
  echo "workflow   : ${_workflow}"
  echo "session_id : ${_session_id}"
  echo "attempt_id : ${_attempt_id}"
}


#---------------------------------------------------------------------------------------------------
# dig実行ログの表示
#
# 概要
#   stfw.domain.gateway.digdag.startで実行したdigの実行ログを表示します。
#
# 引数
#   1: digdagプロジェクトディレクトリ
#   2: attempt id
#
# 出力
#   環境変数
#     なし
#   標準出力
#     実行ログ
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.log_follow() {
  local _digdag_proj_dir="${1:?}"
  local _attempt_id="${2:?}"

  (
    echo ""
    echo "---------- attempt_id:${_attempt_id} ----------"
  ) >&2

  log.trace "cd \"${_digdag_proj_dir}\""
  cd "${_digdag_proj_dir}"

  local _cmd=( "${PATH_DIGDAG}" log "${_attempt_id}" --follow )
  log.trace "${_cmd[@]}"
  "${_cmd[@]}" >&2
  local _retcode=$?

  log.trace "cd -"
  cd - >/dev/null 2>&1

  (
    echo "---------- attempt_id:${_attempt_id} ----------"
    echo ""
  ) >&2

  return ${_retcode}
}


#---------------------------------------------------------------------------------------------------
# dig実行結果の表示
#
# 概要
#   attempt id.親taskのstateを表示します。
#
# 引数
#   1: attempt id
#
# 出力
#   環境変数
#     なし
#   標準出力
#     state
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.get_state() {
  local _attempt_id="${1:?}"

  "${PATH_DIGDAG}" tasks "${_attempt_id}" 2>/dev/null                                              |
  grep "state:"                                                                                    |
  head -n 1                                                                                        |
  cut -d ':' -f 2                                                                                  |
  _trim
}


#---------------------------------------------------------------------------------------------------
# digdag server 起動
#
# 概要
#   digdag serverを起動します。
#
# 引数
#   なし
#
# 出力
#   環境変数
#     なし
#   標準出力
#     なし
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.server.start() {
  # バナー表示
  cat "${STFW_HOME}/banner.txt"
  cat "${STFW_HOME}/VERSION"

  # ディレクトリ作成
  if [ ! -d "${STFW_PROJ_DIR_DATA}" ]; then
    mkdir -p "${STFW_PROJ_DIR_DATA}"
  fi

  # ログレベル
  local _parsed_log_level=$(stfw.parse_log_level "${LOGLEVEL}")

  # digdag server 起動
  # shellcheck disable=SC2206
  local _cmd=(
    "${PATH_DIGDAG}" server
      --bind "${stfw_server_bind}"
      --port "${stfw_server_port}"
      ${stfw_server_db_mode}
      --max-task-threads "${stfw_server_max_task_threads}"
      --log-level "${_parsed_log_level}"
      --log "${PATH_LOG}"
      --task-log "${STFW_PROJ_DIR_DATA}"
      --access-log "${STFW_PROJ_DIR_DATA}"
  )
  log.info "${_cmd[@]}"
  ( nohup "${_cmd[@]}" >>"${PATH_LOG}" 2>&1 < /dev/null ) &
  local _pid=$!

  log.trace "echo \"${_pid}\" >\"${PATH_PROJ_PID}\""
  echo "${_pid}" >"${PATH_PROJ_PID}"

  # 起動を待つ
  private.stfw.domain.gateway.digdag.server.wait_response
  _retcode=$?

  if [[ ${_retcode} -ne ${EXITCODE_SUCCESS} ]]; then
    log.error "failed to start stfw.server process."
    return ${_retcode}
  fi

  log.info "start stfw.server process. PID=${_pid}"
  return ${_retcode}
}


#---------------------------------------------------------------------------------------------------
# digdag server 停止
#
# 概要
#   digdag serverを停止します。
#
# 引数
#   なし
#
# 出力
#   環境変数
#     なし
#   標準出力
#     なし
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.server.stop() {
  local _retcode=${EXITCODE_SUCCESS}

  # Process Kill
  local _pid=$(cat ${PATH_PROJ_PID})
  if [[ "$(pgrep -F ${PATH_PROJ_PID})x" != "x" ]]; then
    kill -s SIGTERM ${_pid}
    _retcode=$?
  fi

  # PIDファイルを削除
  rm -f ${PATH_PROJ_PID}
  log.info "stop stfw.server process. PID=${_pid}"

  return ${_retcode}
}


#---------------------------------------------------------------------------------------------------
# digdag server 起動済みチェック
#
# 概要
#   digdag serverが起動済みか確認します。
#
# 引数
#   なし
#
# 出力
#   環境変数
#     なし
#   標準出力
#     true : 起動済み
#     false: その他の場合
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function stfw.domain.gateway.digdag.server.is_running() {
  # PIDファイルの存在確認
  if [[ ! -f "${PATH_PROJ_PID}" ]]; then
    log.trace "${PATH_PROJ_PID} is not exist."
    echo "false"
    return
  fi

  # プロセスの存在確認
  local _pid=$(cat "${PATH_PROJ_PID}")
  if [[ "$(pgrep -F ${PATH_PROJ_PID})x" = "x" ]]; then
    # PIDファイルがあって、プロセスが存在しない場合、PIDファイルを削除して、停止中扱い
    log.trace "${_pid} is not running."
    rm -f ${PATH_PROJ_PID}
    echo "false"
    return
  fi

  # リクエストを送って起動チェック
  private.stfw.domain.gateway.digdag.server.is_running
}


#---------------------------------------------------------------------------------------------------
# private dig起動情報の値取得
#
# 概要
#   dig起動情報から指定キーの値を表示します。
#
# 引数
#   1: 起動情報のキー
#
# 出力
#   環境変数
#     なし
#   標準出力
#     指定キーの値
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function private.stfw.domain.gateway.digdag.get_start_info() {
  local _digdag_proj_dir="$1"
  local _key="$2"
  local _start_info="${_digdag_proj_dir}/${STFW__FILENAME_START_INFO}"

  grep "${_key}:" < "${_start_info}"                                                               | # start.infoから、keyでgrep
  cut -d ':' -f 2                                                                                  | # : 区切りの 2フィールド目
  _trim
}


#---------------------------------------------------------------------------------------------------
# private digdag serverの起動待機
#
# 概要
#   digdag serverからレスポンスが返却されるまで待機します。
#   timeout 10秒
#
# 引数
#   なし
#
# 出力
#   環境変数
#     なし
#   標準出力
#     なし
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function private.stfw.domain.gateway.digdag.server.wait_response() {
  local _RETRY_COUNT=10

  local _path_tmp_retry="${STFW_PROJ_DIR_DATA}/${FUNCNAME[0]}_retry_$$"
  echo ${_RETRY_COUNT} >"${_path_tmp_retry}"

  local _retcode=${EXITCODE_SUCCESS}

  local _is_success=$(
    while :; do
      local _retry_count=$(cat ${_path_tmp_retry})
      if [[ "${_retry_count}" = "0" ]]; then break; fi
      _retry_count=$((_retry_count - 1))
      echo ${_retry_count} >"${_path_tmp_retry}"

      local _is_running=$(private.stfw.domain.gateway.digdag.server.is_running)
      if [[ "${_is_running}" = "true" ]]; then echo "true"; break; fi
      sleep 1
    done
  )

  if [[ "${_is_success}" != "true" ]]; then _retcode=${EXITCODE_ERROR}; fi
  rm -f "${_path_tmp_retry}"

  return ${_retcode}
}


#---------------------------------------------------------------------------------------------------
# private digdag serverの起動チェック
#
# 概要
#   digdag serverからレスポンスが返却されるか確認します。
#
# 引数
#   なし
#
# 出力
#   環境変数
#     なし
#   標準出力
#     true : レスポンスが返却された場合
#     false: その他の場合
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function private.stfw.domain.gateway.digdag.server.is_running() {
  local _URL_HEALTHCHECK="http://localhost:${stfw_server_port}/api/projects"

  local _cur_status=$(                                                                             \
    curl                                                                                           \
      --silent                                                                                     \
      --request GET                                                                                \
      --write-out '%{http_code}'                                                                   \
      --output /dev/null                                                                           \
      ${_URL_HEALTHCHECK}                                                                          \
    2>/dev/null                                                                                    \
  )

  log.trace "response code: ${_cur_status}"
  if [[ "$(echo ${_cur_status} | cut -c 1)" = "2" ]]; then
    echo "true"
    return
  fi

  echo "false"
}
