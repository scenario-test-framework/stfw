#!/bin/bash
#==================================================================================================
#
# 共通関数定義
# ※_で始まるfunctionは、パイプでの呼出しだけを想定しています。
#
#==================================================================================================
#--------------------------------------------------------------------------------------------------
# 実行OS判定
#--------------------------------------------------------------------------------------------------
function is_mac() {
  if [ "$(uname)" == 'Darwin' ]; then
    echo "true"
  else
    echo "false"
  fi
  return 0
}

function is_linux() {
  local _uname=$(uname -s)
  if [ "$(expr substr ${_uname} 1 5)" == 'Linux' ]; then
    echo "true"
  else
    echo "false"
  fi
  return 0
}

function is_cygwin() {
  local _uname=$(uname -s)
  if [ "$(expr substr ${_uname} 1 10)" == 'MINGW32_NT' ]; then
    echo "true"
  else
    echo "false"
  fi
  return 0
}


#--------------------------------------------------------------------------------------------------
# 文字列操作
#--------------------------------------------------------------------------------------------------
function _trim() {
  cat -                                                                                            | # 標準入力から
  sed -e "s|^  *||g"                                                                               | # leftトリム
  sed -e "s|  *$||g"                                                                                 # rightトリム
  return 0
}

function _ltrim() {
  cat -                                                                                            | # 標準入力から
  sed -e "s|^  *||g"                                                                                 # leftトリム
  return 0
}

function _rtrim() {
  cat -                                                                                            | # 標準入力から
  sed -e "s|  *$||g"                                                                                 # rightトリム
  return 0
}

function _sp_multi2single() {
  cat -                                                                                            | # 標準入力から
  sed -E "s| +| |g"                                                                                  # 複数スペースを単一に置換
  return 0
}


#--------------------------------------------------------------------------------------------------
# 行操作
#--------------------------------------------------------------------------------------------------
function _except_comment_row() {
  cat -                                                                                            | # 標準入力から
  grep -v '^\s*#'                                                                                    # コメント行を除外
  return 0
}

function _except_empty_row() {
  cat -                                                                                            | # 標準入力から
  grep -v '^\s*$'                                                                                    # 空行を除外
  return 0
}


#--------------------------------------------------------------------------------------------------
# SSH
#--------------------------------------------------------------------------------------------------
function gen_ssh_server_key() {
  local _USAGE="Usage: ${FUNCNAME[0]} IP"
  local _PATH_KNOWN_HOSTS=~/.ssh/known_hosts

  local _ip="$1"
  local _ret_code=0

  # 入力チェック
  if [ "${_ip}" = "" ]; then
    echo "IP が指定されていません。" >&2
    echo "${_USAGE}" >&2
    return 1
  fi

  # キーの存在チェック
  cat ${_PATH_KNOWN_HOSTS} | grep ${_ip} > /dev/null 2>&1
  _ret_code=$?
  if [ ${_ret_code} -eq 0 ]; then
    echo "${_ip} のSSHサーバキーは既に存在します。"
    return 0
  fi

  # サーバキー削除
  ssh-keygen -R ${_ip} > /dev/null 2>&1
  _ret_code=$?
  if [ ${_ret_code} -ne 0 ]; then
    echo "${_ip} のSSHサーバキー削除に失敗しました。コマンド: ssh-keygen -R ${_ip}、リターンコード: ${_ret_code}" >&2
    return 1
  fi

  # サーバキー追加
  ssh-keyscan ${_ip} >> ${_PATH_KNOWN_HOSTS} 2> /dev/null
  _ret_code=$?
  if [ ${_ret_code} -ne 0 ]; then
    echo "${_ip} のSSHサーバキー追加に失敗しました。コマンド: ssh-keyscan ${_ip} >> ${_PATH_KNOWN_HOSTS}、リターンコード: ${_ret_code}" >&2
    return 1
  fi

  echo "${_ip} のSSHサーバキーを追加しました。"
  return 0
}


#--------------------------------------------------------------------------------------------------
# 自ホストIPアドレス取得
#--------------------------------------------------------------------------------------------------
function get_ip() {
  # 自IPを標準出力
  LANG=C /sbin/ifconfig                                                                            |
  grep 'inet '                                                                                     |
  grep -v 127.0.0.1                                                                                |
  head -n 1                                                                                        |
  awk '{print $2}'                                                                                 |
  cut -d ':' -f 2
  return 0
}


#--------------------------------------------------------------------------------------------------
# URLエンコード・デコード
#--------------------------------------------------------------------------------------------------
function _urlencode() {
  local _lf='\%0A'

  cat -                                                                                            | # 標準出力から
  python -c 'import sys, urllib ; print urllib.quote(sys.stdin.read());'                           | # URLエンコード
  sed "s|${_lf}$||g"                                                                                 # 末尾に改行コードが付与されるので除外

  return 0
}

function _urldecode() {
  cat -                                                                                            | # 標準出力から
  python -c 'import sys, urllib ; print urllib.unquote(sys.stdin.read());'

  return 0
}


#------------------------------------------------------------------------------
# 拡張子取得
#
# 引数
#   $1: 対象ファイルパス
#------------------------------------------------------------------------------
function get_ext() {
  local _path="$1"
  local _ext="${_path##*.}"

  # 変数展開結果を確認
  if [ "${_ext}" = "gz" ]; then
    # gzの場合、2重拡張子を確認 ※tar.gzのみ対応
    if [ "$(basename ${_path} .tar.gz)" != "$(basename ${_path})" ]; then
      _ext="tar.gz"
    fi

  elif [ "${_ext}" = "${_path}" ]; then
    # pathそのままの場合、拡張子なし
    _ext=""
  fi

  echo "${_ext}"
  return ${EXITCODE_SUCCESS}
}


#--------------------------------------------------------------------------------------------------
# 暗号化・復号化
#--------------------------------------------------------------------------------------------------
function gen_encrypt_key() {
  # 設定チェック
  if [ "${PATH_ENCRYPT_KEY}" = "" ]; then
    echo "PATH_ENCRYPT_KEY が設定されていません。" >&2
    return 1
  fi
  if [ "${PATH_DECRYPT_KEY}" = "" ]; then
    echo "PATH_DECRYPT_KEY が設定されていません。" >&2
    return 1
  fi

  # 鍵作成
  echo "openssl req -x509 -nodes -newkey rsa:2048 -keyout \"${PATH_DECRYPT_KEY}\" -out \"${PATH_ENCRYPT_KEY}\" -subj '/'"
  openssl req -x509 -nodes -newkey rsa:2048 -keyout "${PATH_DECRYPT_KEY}" -out "${PATH_ENCRYPT_KEY}" -subj '/'
  return $?
}

function _encrypt() {
  # 設定チェック
  if [ "${PATH_ENCRYPT_KEY}" = "" ]; then
    echo "PATH_ENCRYPT_KEY が設定されていません。" >&2
    return 1
  fi

  # 暗号化
  cat -                                                                                            | # 標準入力（平文）を
  openssl smime -encrypt -aes256 -binary -outform PEM "${PATH_ENCRYPT_KEY}"                          # PATH_ENCRYPT_KEYで暗号化
  return 0
}

function _decrypt() {
  # 設定チェック
  if [ "${PATH_DECRYPT_KEY}" = "" ]; then
    echo "PATH_DECRYPT_KEY が設定されていません。" >&2
    return 1
  fi

  # 復号化
  cat -                                                                                            | # 標準入力（暗号化文字列）を
  openssl smime -decrypt -binary -inform PEM -inkey "${PATH_DECRYPT_KEY}"                            # PATH_DECRYPT_KEYで復号化
  return 0
}


#--------------------------------------------------------------------------------------------------
# setオプション判定
#--------------------------------------------------------------------------------------------------
function is_errorexit_on() {
  is_setoption_on "errexit"
}
function is_nounset_on() {
  is_setoption_on "nounset"
}
function is_xtrace_on() {
  is_setoption_on "xtrace"
}
function is_setoption_on() {
  local _target="$1"
  set -o                                                                                           |
  grep "${_target}"                                                                                |
  tr '\t' ' '                                                                                      |
  sed -E "s| +| |g"                                                                                |
  cut -d ' ' -f 2                                                                                  |
  sed -e 's|on|true|'                                                                              |
  sed -e 's|off|false|'
}
# SAMPLE
#local _before_set_errorexit=$(is_errorexit_on)
#local _before_set_nounset=$(is_nounset_on)
#local _before_set_xtrace=$(is_xtrace_on)
#set +eux
#
# 任意の処理...
#
#if [ "${_before_set_errorexit}" = "true" ]; then
#  set -e
#fi
#if [ "${_before_set_nounset}" = "true" ]; then
#  set -u
#fi
#if [ "${_before_set_xtrace}" = "true" ]; then
#  set -x
#fi



#--------------------------------------------------------------------------------------------------
# yamlファイル -> properties変換
#
# 概要
#   yamlファイルの定義内容を、properties形式で標準出力します。
#
# 引数
#   yamlファイルパス
#
# 出力
#   環境変数
#     なし
#   標準出力
#     サンプルを参照してください。
#   ファイル
#     なし
#
# サンプル
#   yaml
#     map:
#       key: value1
#       list:
#       - list_value1
#       - list_value2
#
#   properties
#     map_key="value1"
#     map_list_0="list_value1"
#     map_list_1="list_value2"
#
#--------------------------------------------------------------------------------------------------
function yaml2properties() {
  log.func_start_trace "$@"

  local _path_input_yaml="$1"

  local _path_tmp_fields="/tmp/$$_$(basename ${_path_input_yaml}).fields"
  local _path_tmp_values="/tmp/$$_$(basename ${_path_input_yaml}).values"
  local _path_tmp_result="/tmp/$$_$(basename ${_path_input_yaml}).result"

  # 変数名ファイルを生成
  # サンプル
  #   MAP_KEY
  #   MAP_LIST_0
  #   MAP_LIST_1
  cat "${_path_input_yaml}"                                                                        | # yamlファイルから
  ${DIR_BIN_LIB}/yaml2json                                                                         | # jsonに変換
  ${DIR_BIN_LIB}/Parsrs/parsrj.sh -rt -kd_                                                         | # json -> フィールド形式
  ${DIR_BIN_LIB}/Tukubai/self 1                                                                    | # 項目名 をselect
  sed -e 's|^_||'                                                                                  | # 行頭の_を除去
  sed -e 's|\[|_|g'                                                                                | # 配列のインデックスを除去
  sed -e 's|\]||g'                                                                                 |
#  tr '[:lower:]' '[:upper:]'                                                                       | # 大文字化
  tee > "${_path_tmp_fields}"

  # 値ファイルを生成
  # サンプル
  #   "value1"
  #   "list_value1"
  #   "list_value2"
  cat "${_path_input_yaml}"                                                                        | # yamlファイルから
  ${DIR_BIN_LIB}/yaml2json                                                                         | # jsonに変換
  ${DIR_BIN_LIB}/Parsrs/parsrj.sh -rt -kd_                                                         | # json -> フィールド形式
  ${DIR_BIN_LIB}/Tukubai/self 2/NF                                                                 | # 値 をselect
  xargs -I{} /bin/bash -c "eval 'echo {}'"                                                         | # 環境変数を展開
  sed -e 's|^|"|'                                                                                  | # ダブルクォートで括る
  sed -e 's|$|"|'                                                                                  |
  tee > "${_path_tmp_values}"

  # "="区切りで横方向に連結
  paste -d '=' "${_path_tmp_fields}" "${_path_tmp_values}" > "${_path_tmp_result}"

  # 結果表示
  cat "${_path_tmp_result}" | log.trace
  cat "${_path_tmp_result}"

  # 一時ファイルを削除
  rm -f "${_path_tmp_fields}"
  rm -f "${_path_tmp_values}"
  rm -f "${_path_tmp_result}"

  log.func_end_trace ${EXITCODE_SUCCESS}
}



#--------------------------------------------------------------------------------------------------
# yamlファイルの環境変数展開
#
# 概要
#   yamlファイルの定義内容を、exportした環境変数に設定します。
#
# 引数
#   yamlファイルパス
#
# 出力
#   環境変数
#     サンプルを参照してください。
#   標準出力
#     なし
#   ファイル
#     なし
#
# サンプル
#   yaml
#     map:
#       key: value1
#       list:
#       - list_value1
#       - list_value2
#
#   環境変数
#     map_key="value1"
#     map_list_0="list_value1"
#     map_list_1="list_value2"
#
#--------------------------------------------------------------------------------------------------
function export_yaml() {
  log.func_start_trace "$@"
  local _path_input_yaml="$1"
  local _tmp_path_props="/tmp/export_yaml_$$.properties"

  yaml2properties "${_path_input_yaml}" | sed -e 's|^|export |' > "${_tmp_path_props}"
  source "${_tmp_path_props}"
  rm -f "${_tmp_path_props}"

  log.func_end_trace ${EXITCODE_SUCCESS}
}



#---------------------------------------------------------------------------------------------------
# 動的な環境変数の反映
#
# 概要
#   KEY=VALUE の文字列から、環境変数 KEY (設定値 VALUE) を設定します。
#
# 引数
#   1: 変数定義 KEY=VALUE
#
# 出力
#   環境変数
#     KEY
#   標準出力
#     なし
#   ファイル
#     なし
#
#---------------------------------------------------------------------------------------------------
function apply_dynamic_env() {
  local _tmp_var="$(echo $1 | cut -d '=' -f 1)"
  local _tmp_value="$(echo $1 | cut -d '=' -f 2)"
  eval ${_tmp_var}=\'${_tmp_value}\'
  # shellcheck disable=SC2163
  export "${_tmp_var}"
}
