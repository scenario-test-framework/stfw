#!/bin/bash
#set -ex
#===================================================================================================
#
# server control
#
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 設定
#---------------------------------------------------------------------------------------------------
dir_script="$(dirname $0)"
cd "$(cd ${dir_script}; pwd)"

readonly STFW_HOME="$(cd ../..; pwd)"
. "${STFW_HOME}/bin/lib/setenv"
. "${DIR_BIN_LIB}/stfw/adapter/cli/server_controller"

readonly PROGNAME="stfw $(basename $0)"


#---------------------------------------------------------------------------------------------------
# 関数定義
#---------------------------------------------------------------------------------------------------
function private.description() {
  echo "  $(basename $0) : server control"
}


function private.usage() {
  cat << __EOT__ >&2
usage: ${PROGNAME} start|stop|restart|status [start options...]

start options:
  -b, --bind ADDRESS       : IP address to listen HTTP clients (default: ${stfw_server_bind})
  -n, --port PORT          : port number to listen for web interface and api clients (default: ${stfw_server_port})
  -m, --memory             : uses memory database (default: ${stfw_server_db_mode})
  -o, --database DIR       : store status to this database (default: ${stfw_server_db_mode})
      --max-task-threads N : limit maxium number of task execution threads

__EOT__
  exit ${EXITCODE_ERROR}
}


function private.status() {
  # digdag server
  local _is_running=$(stfw.domain.gateway.digdag.server.is_running)
  if [[ "${_is_running}" = "true" ]]; then
    log.info "${PROGNAME} process is running."
    return
  fi

  log.info "${PROGNAME} process is NOT running."
}



#---------------------------------------------------------------------------------------------------
# 引数解析
#---------------------------------------------------------------------------------------------------
# 引数チェック
if [[ $# -lt 1 ]]; then
  private.usage
fi

# 実行コマンド
cmd="$1"
shift


#---------------------------------------------------------------------------------------------------
# オプション解析
#---------------------------------------------------------------------------------------------------
while :; do
  case $1 in
    -b|--bind)
      export stfw_server_bind="$2"
      shift 2
      ;;

    -n|--port)
      export stfw_server_port="$2"
      shift 2
      ;;

    -m|--memory)
      export stfw_server_db_mode="--memory"
      shift
      ;;

    -o|--database)
      export stfw_server_db_mode="--database $2"
      shift 2
      ;;

    --max-task-threads)
      export stfw_server_max_task_threads="$2"
      shift 2
      ;;

    --)
      shift
      break
      ;;

    *)
      break
      ;;
  esac
done



#---------------------------------------------------------------------------------------------------
# コマンド実行
#---------------------------------------------------------------------------------------------------
case ${cmd} in
  --description)
    private.description
    exit ${EXITCODE_ERROR}
    ;;

  start)
    stfw.adapter.cli.server.start 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;

  stop)
    stfw.adapter.cli.server.stop 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;

  restart)
    stfw.adapter.cli.server.restart 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;

  status)
    private.status 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;

  *)
    private.usage
    ;;
esac

exit ${exitcode}
