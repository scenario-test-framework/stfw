#!/bin/bash
#set -ex
#===================================================================================================
#
# scenario test framework cli - passwd
#
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 設定
#---------------------------------------------------------------------------------------------------
dir_script="$(dirname $0)"
cd "$(cd ${dir_script}; pwd)"

# 共通設定
readonly STFW_HOME="$(cd ../..; pwd)"
. "${STFW_HOME}/bin/lib/setenv"

readonly PROGNAME="stfw $(basename $0)"


#---------------------------------------------------------------------------------------------------
# 関数定義
#---------------------------------------------------------------------------------------------------
function private.description() {
  echo "  $(basename $0) : generate encrypted passwd file"
}


function private.usage() {
  cat << __EOT__ >&2
usage: ${PROGNAME} [options...] <host> <user> <password>

options:
  -f, --force              : force generate
  -s, --show <host> <user> : show password

__EOT__
  exit ${EXITCODE_ERROR}
}

function private.generate() {
  log.func_start_trace "is_force=$1" "$2" "$3" "PASSWORD"

  local _is_force="$1"
  local _host="$2"
  local _user="$3"
  local _password="$4"

  local _path_passwd="$(stfw.get_passwd_path ${_host} ${_user})"

  # ファイル存在チェック
  if [[ -f "${_path_passwd}" ]]; then
    if [[ "${_is_force}" != "true" ]]; then
      log.error "${_path_passwd} is already exists. host: ${_host}, user: ${_user}"
      exit ${EXITCODE_ERROR}
    fi

    rm -f "${_path_passwd}"
  fi

  local _dir_passwd="$(dirname ${_path_passwd})"
  if [[ ! -d "${_dir_passwd}" ]]; then mkdir -p "${_dir_passwd}"; fi

  echo ${_password}                                                                                |
  _encrypt "${PATH_ENCRYPT_KEY}" >"${_path_passwd}"
  local _retcode=$?

  if [[ ${_retcode} -ne ${EXITCODE_SUCCESS} ]]; then rm -f "${_path_passwd}"; fi
  log.func_end_trace ${_retcode}
  return ${_retcode}
}


function private.show() {
  log.func_start_trace "$@"

  local _host="$1"
  local _user="$2"

  stfw.show_passwd "${_host}" "${_user}"
  local _retcode=$?

  log.func_end_trace ${_retcode}
  return ${_retcode}
}


#---------------------------------------------------------------------------------------------------
# 事前処理
#---------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# オプション解析
#-------------------------------------------------------------------------------
# 実行コマンド
cmd="generate"
# 強制上書きモード
is_force="false"

while :; do
  case $1 in
    --description)
      private.description
      exit ${EXITCODE_ERROR}
      ;;

    -h|--help)
      private.usage
      exit ${EXITCODE_ERROR}
      ;;

    -f|--force)
      is_force="true"
      shift
      ;;

    -s|--show)
      cmd="show"
      shift
      ;;

    --)
      shift
      break
      ;;

    *)
      break
      ;;
  esac
done


#---------------------------------------------------------------------------------------------------
# 本処理
#---------------------------------------------------------------------------------------------------
log.script_start "${PROGNAME} ${cmd}"

#-------------------------------------------------------------------------------
# 引数解析
#-------------------------------------------------------------------------------
# コマンド実行
case ${cmd} in
  generate)
    if [[ $# -ne 3 ]]; then private.usage; fi
    host="$1"
    user="$2"
    password="$3"
    private.generate "${is_force}" "${host}" "${user}" "${password}"
    ;;

  show)
    if [[ $# -ne 2 ]]; then private.usage; fi
    host="$1"
    user="$2"
    private.show "${host}" "${user}"
    ;;

  *)
    private.usage
    ;;
esac
exitcode=$?

log.script_end "${PROGNAME} ${cmd}" "${exitcode}"
exit ${exitcode}
