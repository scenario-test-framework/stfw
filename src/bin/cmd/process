#!/bin/bash
#set -ex
#===================================================================================================
#
# process command
#
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 設定
#---------------------------------------------------------------------------------------------------
dir_script="$(dirname $0)"
cd "$(cd ${dir_script}; pwd)"

readonly STFW_HOME="$(cd ../..; pwd)"
. "${STFW_HOME}/bin/lib/setenv"
. "${DIR_BIN_LIB}/stfw/adapter/cli/process_controller"

readonly PROGNAME="stfw $(basename $0)"


#---------------------------------------------------------------------------------------------------
# 関数定義
#---------------------------------------------------------------------------------------------------
function private.description() {
  echo "  $(basename $0) : scenario-process control"
}


function private.usage() {
  cat << __EOT__ >&2
usage: ${PROGNAME} [options...]

options:
  -l, --list                              : list process plugin
  -I, --install <process-type>            : install process plugin dependencies
  -i, --init <seq> <group> <process-type> : generate scaffold to current directory
  -d, --dry-run <exec-dir>                : run setup, pre_execute, teardown
  -r, --run <exec-dir>                    : run setup, pre_execute, execute, post_execute, teardown

__EOT__
  exit ${EXITCODE_ERROR}
}


#---------------------------------------------------------------------------------------------------
# オプション解析
#---------------------------------------------------------------------------------------------------
# 実行コマンド
cmd="list"
# プロセスタイプ
process_type=""
# プロセス実行ディレクトリ
trg_process_dir=""

while :; do
  case $1 in
    --description)
      private.description
      exit ${EXITCODE_ERROR}
      ;;

    -h|--help)
      private.usage
      ;;

    -l|--list)
      cmd="list"
      shift
      break
      ;;

    -I|--install)
      cmd="install"

      # プロセス名
      process_type="$2"
      shift 2
      break
      ;;

    -i|--init)
      if [[ $# -lt 4 ]]; then private.usage; fi
      cmd="init"

      # 連番
      seq="$2"
      checks.must_be_number "${seq}"

      # グループ名
      group="$3"

      # プロセス名
      process_type="$4"
      shift 4
      break
      ;;

    -r|--run)
      if [[ $# -lt 2 ]]; then private.usage; fi
      cmd="run"

      # プロセスディレクトリ
      trg_process_dir="$2"
      checks.must_exist_dir "${trg_process_dir}"
      shift 2
      break
      ;;

    -d|--dry-run)
      if [[ $# -lt 2 ]]; then private.usage; fi
      cmd="dry-run"

      # プロセスディレクトリ
      trg_process_dir="$2"
      checks.must_exist_dir "${trg_process_dir}"
      break
      ;;

    --)
      shift
      break
      ;;

    *)
      break
      ;;
  esac
done


#---------------------------------------------------------------------------------------------------
# コマンド実行
#---------------------------------------------------------------------------------------------------
stfw.log.script_start "${PROGNAME} ${cmd}"

case ${cmd} in
  install)
    stfw.adapter.cli.process_controller.install "${process_type}" 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;
  list)
    stfw.adapter.cli.process_controller.list
    exitcode=$?
    ;;
  init)
    stfw.adapter.cli.process_controller.init "${process_type}" "${seq}" "${group}" 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;
  run)
    stfw.adapter.cli.process_controller.run "${trg_process_dir}" 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;
  dry-run)
    stfw.adapter.cli.process_controller.dry_run "${trg_process_dir}" 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;
  *)
    private.usage
    ;;
esac

stfw.log.script_end "${PROGNAME} ${cmd}" "${exitcode}"
exit ${exitcode}
