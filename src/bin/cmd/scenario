#!/bin/bash
#set -ex
#===================================================================================================
#
# scenario command
#
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 設定
#---------------------------------------------------------------------------------------------------
dir_script="$(dirname $0)"
cd "$(cd ${dir_script}; pwd)"

readonly STFW_HOME="$(cd ../..; pwd)"
. "${STFW_HOME}/bin/lib/setenv"
. "${DIR_BIN_LIB}/stfw/adapter/cli/scenario_controller"

readonly PROGNAME="stfw $(basename $0)"


#---------------------------------------------------------------------------------------------------
# 関数定義
#---------------------------------------------------------------------------------------------------
function private.description() {
  echo "  $(basename $0) : scenario control"
}


function private.usage() {
  cat << __EOT__ >&2
usage: ${PROGNAME} [options...]

options:
  -i, --init <scenario-name> : generate scaffold to current directory
  -g, --generate-dig         : generate workflow definition from current directory structure
  -G, --generate-dig-cascade : generate workflow definition from current directory structure with children
  -s, --setup <exec-dir>     : run setup scripts
  -t, --teardown <exec-dir>  : run teardown scripts

__EOT__
  exit ${EXITCODE_ERROR}
}


#---------------------------------------------------------------------------------------------------
# オプション解析
#---------------------------------------------------------------------------------------------------
# 実行コマンド
cmd=""
# generate mode
generate_mode=""
# シナリオディレクトリ
trg_scenario_dir=""

while :; do
  case $1 in
    --description)
      private.description
      exit ${EXITCODE_ERROR}
      ;;

    -h|--help)
      private.usage
      ;;

    -i|--init)
      if [[ $# -lt 2 ]]; then private.usage; fi
      cmd="init"
      # シナリオ名
      scenario_name="$2"
      shift
      break
      ;;

    -g|--generate-dig)
      cmd="generate-dig"
      generate_mode="${STFW__GEN_MODE_SELF}"
      shift
      break
      ;;

    -G|--generate-dig-cascade)
      cmd="generate-dig"
      generate_mode="${STFW__GEN_MODE_CASCADE}"
      shift
      break
      ;;

    -s|--setup)
      if [[ $# -lt 2 ]]; then private.usage; fi
      cmd="setup"

      trg_scenario_dir="$2"
      shift 2
      break
      ;;

    -t|--teardown)
      if [[ $# -lt 2 ]]; then private.usage; fi
      cmd="teardown"

      trg_scenario_dir="$2"
      shift 2
      break
      ;;

    --)
      shift
      break
      ;;

    *)
      break
      ;;
  esac
done


#---------------------------------------------------------------------------------------------------
# コマンド実行
#---------------------------------------------------------------------------------------------------
stfw.log.script_start "${PROGNAME} ${cmd}"

case ${cmd} in
  init)
    stfw.adapter.cli.scenario_controller.init "${scenario_name}" 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;

  generate-dig)
    stfw.adapter.cli.scenario_controller.generate_dig "${generate_mode}" 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;

  setup)
    stfw.adapter.cli.scenario_controller.setup "${trg_scenario_dir}" 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;

  teardown)
    stfw.adapter.cli.scenario_controller.teardown "${trg_scenario_dir}" 2>&1 | log.tee
    exitcode=${PIPESTATUS[0]}
    ;;

  *)
    private.usage
    ;;
esac

stfw.log.script_end "${PROGNAME} ${cmd}" "${exitcode}"
exit ${exitcode}
