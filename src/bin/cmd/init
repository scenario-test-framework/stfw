#!/bin/bash
#set -ex
#===================================================================================================
#
# scenario test framework cli - init command
#
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 設定
#---------------------------------------------------------------------------------------------------
dir_script="$(dirname $0)"
cd "$(cd ${dir_script}; pwd)"

# 共通設定
readonly STFW_HOME="$(cd ../..; pwd)"
. "${STFW_HOME}/bin/lib/setenv"

# loggingユーティリティ
. "${DIR_BIN_LIB}/logging_utils"
# stfw generate共通ユーティリティ
. "${DIR_BIN_LIB}/stfw_generate_utils"

readonly PROGNAME="stfw $(basename $0)"


#---------------------------------------------------------------------------------------------------
# 関数定義
#---------------------------------------------------------------------------------------------------
function private.description() {
  echo "  $(basename $0) : initialize stfw project"
}


function private.usage() {
  cat << __EOT__ >&2
usage: ${PROGNAME}

__EOT__
  exit ${EXITCODE_ERROR}
}

function private.init() {
  log.func_start_trace
  # 初期化済みの場合、エラー
  if [[ -f "${STFW_PROJ_DIR}/${FILENAME_SYSTEM_CONFIG}" ]]; then
    log.error "${STFW_PROJ_DIR} is already initialized."
    return ${EXITCODE_ERROR}
  fi

  # コピー
  log.trace "cp -pr \"${DIR_TEMPLATE}/\"* \"${STFW_PROJ_DIR}/\""
  cp -pr "${DIR_TEMPLATE}/"* "${STFW_PROJ_DIR}/"

  # 結果を表示
  log.info "result:"
  log.add_indent
  find "${STFW_PROJ_DIR}" -type f                                                                  | # ファイルパスリストから
  sed -e "s|${STFW_PROJ_DIR}/||"                                                                   | # 相対パスに変換
  grep -v ".stfw/"                                                                                 | # stfwデータディレクトリを除外
  grep -v ".digdag/"                                                                               | # digdagデータディレクトリを除外
  log.info
  log.remove_indent

  log.func_end_trace ${EXITCODE_SUCCESS}
  return ${EXITCODE_SUCCESS}
}


#---------------------------------------------------------------------------------------------------
# 事前処理
#---------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# オプション解析
#-------------------------------------------------------------------------------
while :; do
  case $1 in
    --description)
      private.description
      exit ${EXITCODE_ERROR}
      ;;

    -h|--help)
      private.usage
      exit ${EXITCODE_ERROR}
      ;;

    --)
      shift
      break
      ;;

    *)
      break
      ;;
  esac
done


#---------------------------------------------------------------------------------------------------
# 本処理
#---------------------------------------------------------------------------------------------------
log.script_start "${PROGNAME}"

# 初期化
private.init
exitcode=$?

log.script_end "${PROGNAME}" "${exitcode}"
exit ${exitcode}
